import java.util.concurrent.atomic.AtomicIntegerArray;

/**
 * 
 * @author thinkpad
 * 四個線程分工設置數組為1
 */
public class MyConcurrentSet {
	
	
	
	private static volatile AtomicIntegerArray arr = new AtomicIntegerArray(4);
	
	private static volatile boolean done = false;
	
	static {
		for(int i = 0; i< arr.length(); i++) {
			arr.getAndSet(i,0);
		}
	}
	
	public static void checkDone() {
		int sum = 0;
	for(int i = 0; i <arr.length();i++)
		sum += arr.get(i);
		if(sum == 4) done = true;
	}

	public static void main(String[] args) throws InterruptedException {
		
		for(int i = 0; i < 4 ; i++) {
			MyThread thread = new MyThread();
			thread.start();
		}
		
		Thread.sleep(5000);
		
		for(int i = 0; i< arr.length(); i++)
			System.out.println(arr.get(i));

	}
	
	static class MyThread extends Thread{

		@Override
		public void run() {
			
				while(!done) {
					for(int i = arr.length()-1; i >=0 ;i--) {
						
						try {
							if(arr.get(i) != 0) {
								System.out.println(Thread.currentThread().getName() + " skip " + i);
								i--;
							}
							else {
								synchronized(arr)
								{
									if(arr.get(i) == 0) {
										try {
											sleep(1000);
										} catch (InterruptedException e) {
											e.printStackTrace();
										}
										arr.getAndSet(i, 1);
										System.out.println(Thread.currentThread().getName() + "--> arr[" + i + "]");
									}
									
								}
							}
						} catch (Exception e) {
							System.out.println(Thread.currentThread().getName() + " xx--> " + i);
							e.printStackTrace();
						
						}
					}
					checkDone();
				}
				
			}
		
		
	}
	
	

}
